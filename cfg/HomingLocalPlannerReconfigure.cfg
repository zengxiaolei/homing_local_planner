#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
# Robot
grp_robot = gen.add_group("Robot", type="tab")

grp_robot.add("max_vel_x", double_t, 0,
              "Maximum velocity in the x direction of the robot",
              0.3, 0.01, 100)

grp_robot.add("max_vel_x_backwards", double_t, 0,
              "Maximum translational velocity of the robot for driving backwards",
              0.2, 0.01, 100)

grp_robot.add("max_vel_theta", double_t, 0,
              "Maximum angular velocity of the robot",
              0.5, 0.01, 100)

grp_robot.add("acc_lim_x", double_t, 0,
              "Maximum translational acceleration of the robot",
              0.2, 0.01, 100)

grp_robot.add("acc_lim_theta", double_t, 0,
              "Maximum angular acceleration of the robot",
              0.2, 0.01, 100)

grp_robot.add("min_turn_radius", double_t, 0,
              "Minimum turning radius of the robot",
              0.0, 0.0, 100)

grp_robot.add("turn_around_priority", bool_t, 0,
              "If true, the robot preferentially adjusts the orientation to fit the direction of the path",
              True)

grp_robot.add("stop_dist", double_t, 0,
              "When the Euclidean distance between the nearest lethal point on planned path and the robot frame origin is less than this distance, the robot stops",
              0.5, 0.01, 100)

grp_robot.add("dec_dist", double_t, 0,
              "When the Euclidean distance between the nearest lethal point on planned path and the robot frame origin is less than this distance, the robot slows down",
              1.0, 0.01, 100)

# GoalTolerance
grp_goal = gen.add_group("GoalTolerance", type="tab")

grp_goal.add("xy_goal_tolerance", double_t, 0,
             "Allowed final euclidean distance to the goal position",
             0.2, 0.001, 10)

grp_goal.add("yaw_goal_tolerance", double_t, 0,
             "Allowed final orientation error to the goal orientation",
             0.1, 0.001, 3.2)

grp_trajectory = gen.add_group("Trajectory", type="tab")

# Trajectory
grp_trajectory.add("max_global_plan_lookahead_dist",   double_t,   0,
                   "Specify maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization [if 0 or negative: disabled; the length is also bounded by the local costmap size]",
                   3.0, 0, 50.0)

grp_trajectory.add("global_plan_viapoint_sep",   double_t,   0,
                   "Min. separation between each two consecutive via-points extracted from the global plan [if negative: disabled]",
                   0.5, -0.1, 10.0)

grp_trajectory.add("global_plan_goal_sep",   double_t,   0,
                   "Min. separation between last via-points extracted from the global plan and goal",
                   0.8, -0.1, 10.0)

grp_trajectory.add("global_plan_prune_distance",   double_t,   0,
                   "Distance between robot and via_points of global plan which is used for pruning",
                   0.2, -0.1, 10.0)
# Optimization
grp_optimization = gen.add_group("Optimization", type="tab")

grp_optimization.add("k_rho",    double_t,    0,
                     "Proportional parameter for linear velocity adjustment based on the Euclidean distance of the robot position to the current target",
                     1.0, 0.0, 10.0)

grp_optimization.add("k_alpha",    double_t,    0,
                     "Proportional parameter for angular velocity adjustment based on the tangential angle of the target position in the robot's frame of reference",
                     -3.0, -10.0, 10.0)

grp_optimization.add("k_phi",    double_t,    0,
                     "Proportional parameter for angular velocity adjustment based on the difference between the robot's orientation(yaw) and the current target orientation(yaw)",
                     -1.0, -10.0, 10.0)

exit(gen.generate("homing_local_planner",
     "homing_local_planner", "HomingLocalPlannerReconfigure"))
